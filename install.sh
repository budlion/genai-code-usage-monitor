#!/bin/bash
# Codex Usage Monitor - Installation Script
# Installs the monitor to /usr/local/bin for system-wide access

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}╔═══════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║                                                           ║${NC}"
echo -e "${BLUE}║   GenAI Code Usage Monitor - Installation Script         ║${NC}"
echo -e "${BLUE}║   Version 2.0.0 - Dual Platform Support                  ║${NC}"
echo -e "${BLUE}║                                                           ║${NC}"
echo -e "${BLUE}╔═══════════════════════════════════════════════════════════╗${NC}"
echo ""

# Check Python version
echo -e "${YELLOW}→${NC} Checking Python version..."
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}✗${NC} Python 3 is not installed"
    echo -e "  Please install Python 3.8 or higher"
    exit 1
fi

PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
REQUIRED_VERSION="3.8"

if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$PYTHON_VERSION" | sort -V | head -n1)" != "$REQUIRED_VERSION" ]; then
    echo -e "${RED}✗${NC} Python $PYTHON_VERSION found, but Python $REQUIRED_VERSION or higher is required"
    exit 1
fi

echo -e "${GREEN}✓${NC} Python $PYTHON_VERSION found"

# Check if running from project directory
if [ ! -f "setup.py" ] && [ ! -f "pyproject.toml" ]; then
    echo -e "${RED}✗${NC} Please run this script from the project root directory"
    exit 1
fi

# Create virtual environment if it doesn't exist
if [ ! -d "venv" ]; then
    echo -e "${YELLOW}→${NC} Creating virtual environment..."
    python3 -m venv venv
    echo -e "${GREEN}✓${NC} Virtual environment created"
else
    echo -e "${GREEN}✓${NC} Virtual environment already exists"
fi

# Activate virtual environment
echo -e "${YELLOW}→${NC} Activating virtual environment..."
source venv/bin/activate

# Install dependencies
echo -e "${YELLOW}→${NC} Installing dependencies..."
pip install --upgrade pip > /dev/null 2>&1
pip install -r requirements.txt > /dev/null 2>&1
echo -e "${GREEN}✓${NC} Dependencies installed"

# Install package in development mode
echo -e "${YELLOW}→${NC} Installing genai-code-usage-monitor package..."
pip install -e . > /dev/null 2>&1
echo -e "${GREEN}✓${NC} Package installed"

# Create wrapper script
INSTALL_DIR="/usr/local/bin"
SCRIPT_NAME="code-monitor"
PROJECT_DIR="$(pwd)"

echo -e "${YELLOW}→${NC} Creating launcher script..."

# Check if we need sudo
if [ ! -w "$INSTALL_DIR" ]; then
    echo -e "${YELLOW}  Note: sudo access required to install to $INSTALL_DIR${NC}"
    SUDO="sudo"
else
    SUDO=""
fi

# Create the launcher script
cat > /tmp/code-monitor << EOF
#!/bin/bash
# GenAI Code Usage Monitor Launcher
# Auto-generated by install.sh

# Activate virtual environment and run monitor
cd "$PROJECT_DIR"
source venv/bin/activate
PYTHONPATH="$PROJECT_DIR/src" exec python3 -m genai_code_usage_monitor "\$@"
EOF

# Make it executable and move to /usr/local/bin
chmod +x /tmp/code-monitor
$SUDO mv /tmp/code-monitor "$INSTALL_DIR/$SCRIPT_NAME"

echo -e "${GREEN}✓${NC} Launcher script created at $INSTALL_DIR/$SCRIPT_NAME"

# Create uninstall script
echo -e "${YELLOW}→${NC} Creating uninstall script..."
cat > uninstall.sh << 'EOF'
#!/bin/bash
# GenAI Code Usage Monitor - Uninstall Script

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}Uninstalling GenAI Code Usage Monitor...${NC}"

# Remove launcher script
if [ -f "/usr/local/bin/code-monitor" ]; then
    if [ ! -w "/usr/local/bin" ]; then
        sudo rm -f /usr/local/bin/code-monitor
    else
        rm -f /usr/local/bin/code-monitor
    fi
    echo -e "${GREEN}✓${NC} Removed launcher script"
fi

# Remove virtual environment
if [ -d "venv" ]; then
    rm -rf venv
    echo -e "${GREEN}✓${NC} Removed virtual environment"
fi

# Remove config (optional)
read -p "Remove configuration and data (~/.codex-monitor, ~/.claude-monitor)? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf ~/.codex-monitor ~/.claude-monitor
    echo -e "${GREEN}✓${NC} Removed configuration and data"
fi

echo -e "${GREEN}✓${NC} Uninstall complete!"
EOF

chmod +x uninstall.sh
echo -e "${GREEN}✓${NC} Uninstall script created"

# Summary
echo ""
echo -e "${GREEN}╔═══════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║                                                           ║${NC}"
echo -e "${GREEN}║   ✓ Installation Complete!                               ║${NC}"
echo -e "${GREEN}║                                                           ║${NC}"
echo -e "${GREEN}╚═══════════════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${BLUE}Usage:${NC}"
echo -e "  ${GREEN}code-monitor${NC}                    # Monitor both platforms (default)"
echo -e "  ${GREEN}code-monitor --platform codex${NC}  # Monitor only OpenAI Codex"
echo -e "  ${GREEN}code-monitor --platform claude${NC} # Monitor only Claude Code"
echo -e "  ${GREEN}code-monitor --help${NC}            # Show all options"
echo ""
echo -e "${BLUE}Examples:${NC}"
echo -e "  ${GREEN}code-monitor --view realtime --refresh-rate 5${NC}"
echo -e "  ${GREEN}code-monitor --platform all --theme dark${NC}"
echo -e "  ${GREEN}code-monitor --platform codex --plan custom${NC}"
echo ""
echo -e "${BLUE}Uninstall:${NC}"
echo -e "  ${GREEN}./uninstall.sh${NC}"
echo ""
echo -e "${YELLOW}Note:${NC} You may need to restart your terminal or run:"
echo -e "  ${GREEN}source ~/.bashrc${NC}  # or ~/.zshrc"
echo ""
